// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct SCSpecFunctionV0
    //  {
    //      SCSymbol name;
    //      SCSpecFunctionInputV0 inputs<10>;
    //      SCSpecTypeDef outputs<1>;
    //  };

    //  ===========================================================================
    public class SCSpecFunctionV0
    {
        public SCSpecFunctionV0() { }
        public SCSymbol Name { get; set; }
        public SCSpecFunctionInputV0[] Inputs { get; set; }
        public SCSpecTypeDef[] Outputs { get; set; }

        public static void Encode(XdrDataOutputStream stream, SCSpecFunctionV0 encodedSCSpecFunctionV0)
        {
            SCSymbol.Encode(stream, encodedSCSpecFunctionV0.Name);
            int inputssize = encodedSCSpecFunctionV0.Inputs.Length;
            stream.WriteInt(inputssize);
            for (int i = 0; i < inputssize; i++)
            {
                SCSpecFunctionInputV0.Encode(stream, encodedSCSpecFunctionV0.Inputs[i]);
            }
            int outputssize = encodedSCSpecFunctionV0.Outputs.Length;
            stream.WriteInt(outputssize);
            for (int i = 0; i < outputssize; i++)
            {
                SCSpecTypeDef.Encode(stream, encodedSCSpecFunctionV0.Outputs[i]);
            }
        }
        public static SCSpecFunctionV0 Decode(XdrDataInputStream stream)
        {
            SCSpecFunctionV0 decodedSCSpecFunctionV0 = new SCSpecFunctionV0();
            decodedSCSpecFunctionV0.Name = SCSymbol.Decode(stream);
            int inputssize = stream.ReadInt();
            decodedSCSpecFunctionV0.Inputs = new SCSpecFunctionInputV0[inputssize];
            for (int i = 0; i < inputssize; i++)
            {
                decodedSCSpecFunctionV0.Inputs[i] = SCSpecFunctionInputV0.Decode(stream);
            }
            int outputssize = stream.ReadInt();
            decodedSCSpecFunctionV0.Outputs = new SCSpecTypeDef[outputssize];
            for (int i = 0; i < outputssize; i++)
            {
                decodedSCSpecFunctionV0.Outputs[i] = SCSpecTypeDef.Decode(stream);
            }
            return decodedSCSpecFunctionV0;
        }
    }
}
