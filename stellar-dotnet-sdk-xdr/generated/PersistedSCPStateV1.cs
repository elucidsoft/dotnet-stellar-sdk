// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct PersistedSCPStateV1
    //  {
    //  	// Tx sets are saved separately
    //  	SCPEnvelope scpEnvelopes<>;
    //  	SCPQuorumSet quorumSets<>;
    //  };

    //  ===========================================================================
    public class PersistedSCPStateV1
    {
        public PersistedSCPStateV1() { }
        public SCPEnvelope[] ScpEnvelopes { get; set; }
        public SCPQuorumSet[] QuorumSets { get; set; }

        public static void Encode(XdrDataOutputStream stream, PersistedSCPStateV1 encodedPersistedSCPStateV1)
        {
            int scpEnvelopessize = encodedPersistedSCPStateV1.ScpEnvelopes.Length;
            stream.WriteInt(scpEnvelopessize);
            for (int i = 0; i < scpEnvelopessize; i++)
            {
                SCPEnvelope.Encode(stream, encodedPersistedSCPStateV1.ScpEnvelopes[i]);
            }
            int quorumSetssize = encodedPersistedSCPStateV1.QuorumSets.Length;
            stream.WriteInt(quorumSetssize);
            for (int i = 0; i < quorumSetssize; i++)
            {
                SCPQuorumSet.Encode(stream, encodedPersistedSCPStateV1.QuorumSets[i]);
            }
        }
        public static PersistedSCPStateV1 Decode(XdrDataInputStream stream)
        {
            PersistedSCPStateV1 decodedPersistedSCPStateV1 = new PersistedSCPStateV1();
            int scpEnvelopessize = stream.ReadInt();
            decodedPersistedSCPStateV1.ScpEnvelopes = new SCPEnvelope[scpEnvelopessize];
            for (int i = 0; i < scpEnvelopessize; i++)
            {
                decodedPersistedSCPStateV1.ScpEnvelopes[i] = SCPEnvelope.Decode(stream);
            }
            int quorumSetssize = stream.ReadInt();
            decodedPersistedSCPStateV1.QuorumSets = new SCPQuorumSet[quorumSetssize];
            for (int i = 0; i < quorumSetssize; i++)
            {
                decodedPersistedSCPStateV1.QuorumSets[i] = SCPQuorumSet.Decode(stream);
            }
            return decodedPersistedSCPStateV1;
        }
    }
}
