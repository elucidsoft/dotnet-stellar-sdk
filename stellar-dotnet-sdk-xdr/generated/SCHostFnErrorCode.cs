// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  enum SCHostFnErrorCode
    //  {
    //      HOST_FN_UNKNOWN_ERROR = 0,
    //      HOST_FN_UNEXPECTED_HOST_FUNCTION_ACTION = 1,
    //      HOST_FN_INPUT_ARGS_WRONG_LENGTH = 2,
    //      HOST_FN_INPUT_ARGS_WRONG_TYPE = 3,
    //      HOST_FN_INPUT_ARGS_INVALID = 4
    //  };

    //  ===========================================================================
    public class SCHostFnErrorCode
    {
        public enum SCHostFnErrorCodeEnum
        {
            HOST_FN_UNKNOWN_ERROR = 0,
            HOST_FN_UNEXPECTED_HOST_FUNCTION_ACTION = 1,
            HOST_FN_INPUT_ARGS_WRONG_LENGTH = 2,
            HOST_FN_INPUT_ARGS_WRONG_TYPE = 3,
            HOST_FN_INPUT_ARGS_INVALID = 4,
        }
        public SCHostFnErrorCodeEnum InnerValue { get; set; } = default(SCHostFnErrorCodeEnum);

        public static SCHostFnErrorCode Create(SCHostFnErrorCodeEnum v)
        {
            return new SCHostFnErrorCode
            {
                InnerValue = v
            };
        }

        public static SCHostFnErrorCode Decode(XdrDataInputStream stream)
        {
            int value = stream.ReadInt();
            switch (value)
            {
                case 0: return Create(SCHostFnErrorCodeEnum.HOST_FN_UNKNOWN_ERROR);
                case 1: return Create(SCHostFnErrorCodeEnum.HOST_FN_UNEXPECTED_HOST_FUNCTION_ACTION);
                case 2: return Create(SCHostFnErrorCodeEnum.HOST_FN_INPUT_ARGS_WRONG_LENGTH);
                case 3: return Create(SCHostFnErrorCodeEnum.HOST_FN_INPUT_ARGS_WRONG_TYPE);
                case 4: return Create(SCHostFnErrorCodeEnum.HOST_FN_INPUT_ARGS_INVALID);
                default:
                    throw new Exception("Unknown enum value: " + value);
            }
        }

        public static void Encode(XdrDataOutputStream stream, SCHostFnErrorCode value)
        {
            stream.WriteInt((int)value.InnerValue);
        }
    }
}
