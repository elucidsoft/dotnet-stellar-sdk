// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union SCVal switch (SCValType type)
    //  {
    //  case SCV_U63:
    //      int64 u63;
    //  case SCV_U32:
    //      uint32 u32;
    //  case SCV_I32:
    //      int32 i32;
    //  case SCV_STATIC:
    //      SCStatic ic;
    //  case SCV_OBJECT:
    //      SCObject* obj;
    //  case SCV_SYMBOL:
    //      SCSymbol sym;
    //  case SCV_BITSET:
    //      uint64 bits;
    //  case SCV_STATUS:
    //      SCStatus status;
    //  };

    //  ===========================================================================
    public class SCVal
    {
        public SCVal() { }

        public SCValType Discriminant { get; set; } = new SCValType();

        public Int64 U63 { get; set; }
        public Uint32 U32 { get; set; }
        public Int32 I32 { get; set; }
        public SCStatic Ic { get; set; }
        public SCObject Obj { get; set; }
        public SCSymbol Sym { get; set; }
        public Uint64 Bits { get; set; }
        public SCStatus Status { get; set; }
        public static void Encode(XdrDataOutputStream stream, SCVal encodedSCVal)
        {
            stream.WriteInt((int)encodedSCVal.Discriminant.InnerValue);
            switch (encodedSCVal.Discriminant.InnerValue)
            {
                case SCValType.SCValTypeEnum.SCV_U63:
                    Int64.Encode(stream, encodedSCVal.U63);
                    break;
                case SCValType.SCValTypeEnum.SCV_U32:
                    Uint32.Encode(stream, encodedSCVal.U32);
                    break;
                case SCValType.SCValTypeEnum.SCV_I32:
                    Int32.Encode(stream, encodedSCVal.I32);
                    break;
                case SCValType.SCValTypeEnum.SCV_STATIC:
                    SCStatic.Encode(stream, encodedSCVal.Ic);
                    break;
                case SCValType.SCValTypeEnum.SCV_OBJECT:
                    if (encodedSCVal.Obj != null)
                    {
                        stream.WriteInt(1);
                        SCObject.Encode(stream, encodedSCVal.Obj);
                    }
                    else
                    {
                        stream.WriteInt(0);
                    }
                    break;
                case SCValType.SCValTypeEnum.SCV_SYMBOL:
                    SCSymbol.Encode(stream, encodedSCVal.Sym);
                    break;
                case SCValType.SCValTypeEnum.SCV_BITSET:
                    Uint64.Encode(stream, encodedSCVal.Bits);
                    break;
                case SCValType.SCValTypeEnum.SCV_STATUS:
                    SCStatus.Encode(stream, encodedSCVal.Status);
                    break;
            }
        }
        public static SCVal Decode(XdrDataInputStream stream)
        {
            SCVal decodedSCVal = new SCVal();
            SCValType discriminant = SCValType.Decode(stream);
            decodedSCVal.Discriminant = discriminant;
            switch (decodedSCVal.Discriminant.InnerValue)
            {
                case SCValType.SCValTypeEnum.SCV_U63:
                    decodedSCVal.U63 = Int64.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_U32:
                    decodedSCVal.U32 = Uint32.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_I32:
                    decodedSCVal.I32 = Int32.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_STATIC:
                    decodedSCVal.Ic = SCStatic.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_OBJECT:
                    int ObjPresent = stream.ReadInt();
                    if (ObjPresent != 0)
                    {
                        decodedSCVal.Obj = SCObject.Decode(stream);
                    }
                    break;
                case SCValType.SCValTypeEnum.SCV_SYMBOL:
                    decodedSCVal.Sym = SCSymbol.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_BITSET:
                    decodedSCVal.Bits = Uint64.Decode(stream);
                    break;
                case SCValType.SCValTypeEnum.SCV_STATUS:
                    decodedSCVal.Status = SCStatus.Decode(stream);
                    break;
            }
            return decodedSCVal;
        }
    }
}
