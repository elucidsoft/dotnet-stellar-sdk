// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union SCStatus switch (SCStatusType type)
    //  {
    //  case SST_OK:
    //      void;
    //  case SST_UNKNOWN_ERROR:
    //      SCUnknownErrorCode unknownCode;
    //  case SST_HOST_VALUE_ERROR:
    //      SCHostValErrorCode valCode;
    //  case SST_HOST_OBJECT_ERROR:
    //      SCHostObjErrorCode objCode;
    //  case SST_HOST_FUNCTION_ERROR:
    //      SCHostFnErrorCode fnCode;
    //  case SST_HOST_STORAGE_ERROR:
    //      SCHostStorageErrorCode storageCode;
    //  case SST_HOST_CONTEXT_ERROR:
    //      SCHostContextErrorCode contextCode;
    //  case SST_VM_ERROR:
    //      SCVmErrorCode vmCode;
    //  case SST_CONTRACT_ERROR:
    //      uint32 contractCode;
    //  };

    //  ===========================================================================
    public class SCStatus
    {
        public SCStatus() { }

        public SCStatusType Discriminant { get; set; } = new SCStatusType();

        public SCUnknownErrorCode UnknownCode { get; set; }
        public SCHostValErrorCode ValCode { get; set; }
        public SCHostObjErrorCode ObjCode { get; set; }
        public SCHostFnErrorCode FnCode { get; set; }
        public SCHostStorageErrorCode StorageCode { get; set; }
        public SCHostContextErrorCode ContextCode { get; set; }
        public SCVmErrorCode VmCode { get; set; }
        public Uint32 ContractCode { get; set; }
        public static void Encode(XdrDataOutputStream stream, SCStatus encodedSCStatus)
        {
            stream.WriteInt((int)encodedSCStatus.Discriminant.InnerValue);
            switch (encodedSCStatus.Discriminant.InnerValue)
            {
                case SCStatusType.SCStatusTypeEnum.SST_OK:
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_UNKNOWN_ERROR:
                    SCUnknownErrorCode.Encode(stream, encodedSCStatus.UnknownCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_VALUE_ERROR:
                    SCHostValErrorCode.Encode(stream, encodedSCStatus.ValCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_OBJECT_ERROR:
                    SCHostObjErrorCode.Encode(stream, encodedSCStatus.ObjCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_FUNCTION_ERROR:
                    SCHostFnErrorCode.Encode(stream, encodedSCStatus.FnCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_STORAGE_ERROR:
                    SCHostStorageErrorCode.Encode(stream, encodedSCStatus.StorageCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_CONTEXT_ERROR:
                    SCHostContextErrorCode.Encode(stream, encodedSCStatus.ContextCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_VM_ERROR:
                    SCVmErrorCode.Encode(stream, encodedSCStatus.VmCode);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_CONTRACT_ERROR:
                    Uint32.Encode(stream, encodedSCStatus.ContractCode);
                    break;
            }
        }
        public static SCStatus Decode(XdrDataInputStream stream)
        {
            SCStatus decodedSCStatus = new SCStatus();
            SCStatusType discriminant = SCStatusType.Decode(stream);
            decodedSCStatus.Discriminant = discriminant;
            switch (decodedSCStatus.Discriminant.InnerValue)
            {
                case SCStatusType.SCStatusTypeEnum.SST_OK:
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_UNKNOWN_ERROR:
                    decodedSCStatus.UnknownCode = SCUnknownErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_VALUE_ERROR:
                    decodedSCStatus.ValCode = SCHostValErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_OBJECT_ERROR:
                    decodedSCStatus.ObjCode = SCHostObjErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_FUNCTION_ERROR:
                    decodedSCStatus.FnCode = SCHostFnErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_STORAGE_ERROR:
                    decodedSCStatus.StorageCode = SCHostStorageErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_HOST_CONTEXT_ERROR:
                    decodedSCStatus.ContextCode = SCHostContextErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_VM_ERROR:
                    decodedSCStatus.VmCode = SCVmErrorCode.Decode(stream);
                    break;
                case SCStatusType.SCStatusTypeEnum.SST_CONTRACT_ERROR:
                    decodedSCStatus.ContractCode = Uint32.Decode(stream);
                    break;
            }
            return decodedSCStatus;
        }
    }
}
