// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct TransactionResult
    //  {
    //      int64 feeCharged; // actual fee charged for the transaction
    //  
    //      union switch (TransactionResultCode code)
    //      {
    //      case txFEE_BUMP_INNER_SUCCESS:
    //      case txFEE_BUMP_INNER_FAILED:
    //          InnerTransactionResultPair innerResultPair;
    //      case txSUCCESS:
    //      case txFAILED:
    //          OperationResult results<>;
    //      case txTOO_EARLY:
    //      case txTOO_LATE:
    //      case txMISSING_OPERATION:
    //      case txBAD_SEQ:
    //      case txBAD_AUTH:
    //      case txINSUFFICIENT_BALANCE:
    //      case txNO_ACCOUNT:
    //      case txINSUFFICIENT_FEE:
    //      case txBAD_AUTH_EXTRA:
    //      case txINTERNAL_ERROR:
    //      case txNOT_SUPPORTED:
    //      // case txFEE_BUMP_INNER_FAILED: handled above
    //      case txBAD_SPONSORSHIP:
    //      case txBAD_MIN_SEQ_AGE_OR_GAP:
    //      case txMALFORMED:
    //          void;
    //      }
    //      result;
    //  
    //      // reserved for future use
    //      union switch (int v)
    //      {
    //      case 0:
    //          void;
    //      }
    //      ext;
    //  };

    //  ===========================================================================
    public class TransactionResult
    {
        public TransactionResult() { }
        public Int64 FeeCharged { get; set; }
        public TransactionResultResult Result { get; set; }
        public TransactionResultExt Ext { get; set; }

        public static void Encode(XdrDataOutputStream stream, TransactionResult encodedTransactionResult)
        {
            Int64.Encode(stream, encodedTransactionResult.FeeCharged);
            TransactionResultResult.Encode(stream, encodedTransactionResult.Result);
            TransactionResultExt.Encode(stream, encodedTransactionResult.Ext);
        }
        public static TransactionResult Decode(XdrDataInputStream stream)
        {
            TransactionResult decodedTransactionResult = new TransactionResult();
            decodedTransactionResult.FeeCharged = Int64.Decode(stream);
            decodedTransactionResult.Result = TransactionResultResult.Decode(stream);
            decodedTransactionResult.Ext = TransactionResultExt.Decode(stream);
            return decodedTransactionResult;
        }

        public class TransactionResultResult
        {
            public TransactionResultResult() { }

            public TransactionResultCode Discriminant { get; set; } = new TransactionResultCode();

            public InnerTransactionResultPair InnerResultPair { get; set; }
            public OperationResult[] Results { get; set; }
            public static void Encode(XdrDataOutputStream stream, TransactionResultResult encodedTransactionResultResult)
            {
                stream.WriteInt((int)encodedTransactionResultResult.Discriminant.InnerValue);
                switch (encodedTransactionResultResult.Discriminant.InnerValue)
                {
                    case TransactionResultCode.TransactionResultCodeEnum.txFEE_BUMP_INNER_SUCCESS:
                    case TransactionResultCode.TransactionResultCodeEnum.txFEE_BUMP_INNER_FAILED:
                        InnerTransactionResultPair.Encode(stream, encodedTransactionResultResult.InnerResultPair);
                        break;
                    case TransactionResultCode.TransactionResultCodeEnum.txSUCCESS:
                    case TransactionResultCode.TransactionResultCodeEnum.txFAILED:
                        int resultssize = encodedTransactionResultResult.Results.Length;
                        stream.WriteInt(resultssize);
                        for (int i = 0; i < resultssize; i++)
                        {
                            OperationResult.Encode(stream, encodedTransactionResultResult.Results[i]);
                        }
                        break;
                    case TransactionResultCode.TransactionResultCodeEnum.txTOO_EARLY:
                    case TransactionResultCode.TransactionResultCodeEnum.txTOO_LATE:
                    case TransactionResultCode.TransactionResultCodeEnum.txMISSING_OPERATION:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_SEQ:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_AUTH:
                    case TransactionResultCode.TransactionResultCodeEnum.txINSUFFICIENT_BALANCE:
                    case TransactionResultCode.TransactionResultCodeEnum.txNO_ACCOUNT:
                    case TransactionResultCode.TransactionResultCodeEnum.txINSUFFICIENT_FEE:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_AUTH_EXTRA:
                    case TransactionResultCode.TransactionResultCodeEnum.txINTERNAL_ERROR:
                    case TransactionResultCode.TransactionResultCodeEnum.txNOT_SUPPORTED:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_SPONSORSHIP:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_MIN_SEQ_AGE_OR_GAP:
                    case TransactionResultCode.TransactionResultCodeEnum.txMALFORMED:
                        break;
                }
            }
            public static TransactionResultResult Decode(XdrDataInputStream stream)
            {
                TransactionResultResult decodedTransactionResultResult = new TransactionResultResult();
                TransactionResultCode discriminant = TransactionResultCode.Decode(stream);
                decodedTransactionResultResult.Discriminant = discriminant;
                switch (decodedTransactionResultResult.Discriminant.InnerValue)
                {
                    case TransactionResultCode.TransactionResultCodeEnum.txFEE_BUMP_INNER_SUCCESS:
                    case TransactionResultCode.TransactionResultCodeEnum.txFEE_BUMP_INNER_FAILED:
                        decodedTransactionResultResult.InnerResultPair = InnerTransactionResultPair.Decode(stream);
                        break;
                    case TransactionResultCode.TransactionResultCodeEnum.txSUCCESS:
                    case TransactionResultCode.TransactionResultCodeEnum.txFAILED:
                        int resultssize = stream.ReadInt();
                        decodedTransactionResultResult.Results = new OperationResult[resultssize];
                        for (int i = 0; i < resultssize; i++)
                        {
                            decodedTransactionResultResult.Results[i] = OperationResult.Decode(stream);
                        }
                        break;
                    case TransactionResultCode.TransactionResultCodeEnum.txTOO_EARLY:
                    case TransactionResultCode.TransactionResultCodeEnum.txTOO_LATE:
                    case TransactionResultCode.TransactionResultCodeEnum.txMISSING_OPERATION:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_SEQ:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_AUTH:
                    case TransactionResultCode.TransactionResultCodeEnum.txINSUFFICIENT_BALANCE:
                    case TransactionResultCode.TransactionResultCodeEnum.txNO_ACCOUNT:
                    case TransactionResultCode.TransactionResultCodeEnum.txINSUFFICIENT_FEE:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_AUTH_EXTRA:
                    case TransactionResultCode.TransactionResultCodeEnum.txINTERNAL_ERROR:
                    case TransactionResultCode.TransactionResultCodeEnum.txNOT_SUPPORTED:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_SPONSORSHIP:
                    case TransactionResultCode.TransactionResultCodeEnum.txBAD_MIN_SEQ_AGE_OR_GAP:
                    case TransactionResultCode.TransactionResultCodeEnum.txMALFORMED:
                        break;
                }
                return decodedTransactionResultResult;
            }

        }
        public class TransactionResultExt
        {
            public TransactionResultExt() { }

            public int Discriminant { get; set; } = new int();

            public static void Encode(XdrDataOutputStream stream, TransactionResultExt encodedTransactionResultExt)
            {
                stream.WriteInt((int)encodedTransactionResultExt.Discriminant);
                switch (encodedTransactionResultExt.Discriminant)
                {
                    case 0:
                        break;
                }
            }
            public static TransactionResultExt Decode(XdrDataInputStream stream)
            {
                TransactionResultExt decodedTransactionResultExt = new TransactionResultExt();
                int discriminant = stream.ReadInt();
                decodedTransactionResultExt.Discriminant = discriminant;
                switch (decodedTransactionResultExt.Discriminant)
                {
                    case 0:
                        break;
                }
                return decodedTransactionResultExt;
            }

        }
    }
}
