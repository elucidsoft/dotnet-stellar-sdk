// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct LedgerCloseMetaV1
    //  {
    //      LedgerHeaderHistoryEntry ledgerHeader;
    //  
    //      GeneralizedTransactionSet txSet;
    //  
    //      // NB: transactions are sorted in apply order here
    //      // fees for all transactions are processed first
    //      // followed by applying transactions
    //      TransactionResultMeta txProcessing<>;
    //  
    //      // upgrades are applied last
    //      UpgradeEntryMeta upgradesProcessing<>;
    //  
    //      // other misc information attached to the ledger close
    //      SCPHistoryEntry scpInfo<>;
    //  };

    //  ===========================================================================
    public class LedgerCloseMetaV1
    {
        public LedgerCloseMetaV1() { }
        public LedgerHeaderHistoryEntry LedgerHeader { get; set; }
        public GeneralizedTransactionSet TxSet { get; set; }
        public TransactionResultMeta[] TxProcessing { get; set; }
        public UpgradeEntryMeta[] UpgradesProcessing { get; set; }
        public SCPHistoryEntry[] ScpInfo { get; set; }

        public static void Encode(XdrDataOutputStream stream, LedgerCloseMetaV1 encodedLedgerCloseMetaV1)
        {
            LedgerHeaderHistoryEntry.Encode(stream, encodedLedgerCloseMetaV1.LedgerHeader);
            GeneralizedTransactionSet.Encode(stream, encodedLedgerCloseMetaV1.TxSet);
            int txProcessingsize = encodedLedgerCloseMetaV1.TxProcessing.Length;
            stream.WriteInt(txProcessingsize);
            for (int i = 0; i < txProcessingsize; i++)
            {
                TransactionResultMeta.Encode(stream, encodedLedgerCloseMetaV1.TxProcessing[i]);
            }
            int upgradesProcessingsize = encodedLedgerCloseMetaV1.UpgradesProcessing.Length;
            stream.WriteInt(upgradesProcessingsize);
            for (int i = 0; i < upgradesProcessingsize; i++)
            {
                UpgradeEntryMeta.Encode(stream, encodedLedgerCloseMetaV1.UpgradesProcessing[i]);
            }
            int scpInfosize = encodedLedgerCloseMetaV1.ScpInfo.Length;
            stream.WriteInt(scpInfosize);
            for (int i = 0; i < scpInfosize; i++)
            {
                SCPHistoryEntry.Encode(stream, encodedLedgerCloseMetaV1.ScpInfo[i]);
            }
        }
        public static LedgerCloseMetaV1 Decode(XdrDataInputStream stream)
        {
            LedgerCloseMetaV1 decodedLedgerCloseMetaV1 = new LedgerCloseMetaV1();
            decodedLedgerCloseMetaV1.LedgerHeader = LedgerHeaderHistoryEntry.Decode(stream);
            decodedLedgerCloseMetaV1.TxSet = GeneralizedTransactionSet.Decode(stream);
            int txProcessingsize = stream.ReadInt();
            decodedLedgerCloseMetaV1.TxProcessing = new TransactionResultMeta[txProcessingsize];
            for (int i = 0; i < txProcessingsize; i++)
            {
                decodedLedgerCloseMetaV1.TxProcessing[i] = TransactionResultMeta.Decode(stream);
            }
            int upgradesProcessingsize = stream.ReadInt();
            decodedLedgerCloseMetaV1.UpgradesProcessing = new UpgradeEntryMeta[upgradesProcessingsize];
            for (int i = 0; i < upgradesProcessingsize; i++)
            {
                decodedLedgerCloseMetaV1.UpgradesProcessing[i] = UpgradeEntryMeta.Decode(stream);
            }
            int scpInfosize = stream.ReadInt();
            decodedLedgerCloseMetaV1.ScpInfo = new SCPHistoryEntry[scpInfosize];
            for (int i = 0; i < scpInfosize; i++)
            {
                decodedLedgerCloseMetaV1.ScpInfo[i] = SCPHistoryEntry.Decode(stream);
            }
            return decodedLedgerCloseMetaV1;
        }
    }
}
