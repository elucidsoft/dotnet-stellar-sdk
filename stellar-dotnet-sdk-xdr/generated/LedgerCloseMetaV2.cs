// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct LedgerCloseMetaV2
    //  {
    //      LedgerHeaderHistoryEntry ledgerHeader;
    //      
    //      GeneralizedTransactionSet txSet;
    //  
    //      // NB: transactions are sorted in apply order here
    //      // fees for all transactions are processed first
    //      // followed by applying transactions
    //      TransactionResultMetaV2 txProcessing<>;
    //  
    //      // upgrades are applied last
    //      UpgradeEntryMeta upgradesProcessing<>;
    //  
    //      // other misc information attached to the ledger close
    //      SCPHistoryEntry scpInfo<>;
    //  };

    //  ===========================================================================
    public class LedgerCloseMetaV2
    {
        public LedgerCloseMetaV2() { }
        public LedgerHeaderHistoryEntry LedgerHeader { get; set; }
        public GeneralizedTransactionSet TxSet { get; set; }
        public TransactionResultMetaV2[] TxProcessing { get; set; }
        public UpgradeEntryMeta[] UpgradesProcessing { get; set; }
        public SCPHistoryEntry[] ScpInfo { get; set; }

        public static void Encode(XdrDataOutputStream stream, LedgerCloseMetaV2 encodedLedgerCloseMetaV2)
        {
            LedgerHeaderHistoryEntry.Encode(stream, encodedLedgerCloseMetaV2.LedgerHeader);
            GeneralizedTransactionSet.Encode(stream, encodedLedgerCloseMetaV2.TxSet);
            int txProcessingsize = encodedLedgerCloseMetaV2.TxProcessing.Length;
            stream.WriteInt(txProcessingsize);
            for (int i = 0; i < txProcessingsize; i++)
            {
                TransactionResultMetaV2.Encode(stream, encodedLedgerCloseMetaV2.TxProcessing[i]);
            }
            int upgradesProcessingsize = encodedLedgerCloseMetaV2.UpgradesProcessing.Length;
            stream.WriteInt(upgradesProcessingsize);
            for (int i = 0; i < upgradesProcessingsize; i++)
            {
                UpgradeEntryMeta.Encode(stream, encodedLedgerCloseMetaV2.UpgradesProcessing[i]);
            }
            int scpInfosize = encodedLedgerCloseMetaV2.ScpInfo.Length;
            stream.WriteInt(scpInfosize);
            for (int i = 0; i < scpInfosize; i++)
            {
                SCPHistoryEntry.Encode(stream, encodedLedgerCloseMetaV2.ScpInfo[i]);
            }
        }
        public static LedgerCloseMetaV2 Decode(XdrDataInputStream stream)
        {
            LedgerCloseMetaV2 decodedLedgerCloseMetaV2 = new LedgerCloseMetaV2();
            decodedLedgerCloseMetaV2.LedgerHeader = LedgerHeaderHistoryEntry.Decode(stream);
            decodedLedgerCloseMetaV2.TxSet = GeneralizedTransactionSet.Decode(stream);
            int txProcessingsize = stream.ReadInt();
            decodedLedgerCloseMetaV2.TxProcessing = new TransactionResultMetaV2[txProcessingsize];
            for (int i = 0; i < txProcessingsize; i++)
            {
                decodedLedgerCloseMetaV2.TxProcessing[i] = TransactionResultMetaV2.Decode(stream);
            }
            int upgradesProcessingsize = stream.ReadInt();
            decodedLedgerCloseMetaV2.UpgradesProcessing = new UpgradeEntryMeta[upgradesProcessingsize];
            for (int i = 0; i < upgradesProcessingsize; i++)
            {
                decodedLedgerCloseMetaV2.UpgradesProcessing[i] = UpgradeEntryMeta.Decode(stream);
            }
            int scpInfosize = stream.ReadInt();
            decodedLedgerCloseMetaV2.ScpInfo = new SCPHistoryEntry[scpInfosize];
            for (int i = 0; i < scpInfosize; i++)
            {
                decodedLedgerCloseMetaV2.ScpInfo[i] = SCPHistoryEntry.Decode(stream);
            }
            return decodedLedgerCloseMetaV2;
        }
    }
}
