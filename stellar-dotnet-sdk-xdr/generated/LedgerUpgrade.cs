// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union LedgerUpgrade switch (LedgerUpgradeType type)
    //  {
    //  case LEDGER_UPGRADE_VERSION:
    //      uint32 newLedgerVersion; // update ledgerVersion
    //  case LEDGER_UPGRADE_BASE_FEE:
    //      uint32 newBaseFee; // update baseFee
    //  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
    //      uint32 newMaxTxSetSize; // update maxTxSetSize
    //  case LEDGER_UPGRADE_BASE_RESERVE:
    //      uint32 newBaseReserve; // update baseReserve
    //  case LEDGER_UPGRADE_FLAGS:
    //      uint32 newFlags; // update flags
    //  case LEDGER_UPGRADE_CONFIG:
    //      struct
    //      {
    //          ConfigSettingID id; // id to update
    //          ConfigSetting setting; // new value
    //      } configSetting;
    //  };

    //  ===========================================================================
    public class LedgerUpgrade
    {
        public LedgerUpgrade() { }

        public LedgerUpgradeType Discriminant { get; set; } = new LedgerUpgradeType();

        public Uint32 NewLedgerVersion { get; set; }
        public Uint32 NewBaseFee { get; set; }
        public Uint32 NewMaxTxSetSize { get; set; }
        public Uint32 NewBaseReserve { get; set; }
        public Uint32 NewFlags { get; set; }
        public LedgerUpgradeConfigSetting LedgerConfigSetting { get; set; }
        public static void Encode(XdrDataOutputStream stream, LedgerUpgrade encodedLedgerUpgrade)
        {
            stream.WriteInt((int)encodedLedgerUpgrade.Discriminant.InnerValue);
            switch (encodedLedgerUpgrade.Discriminant.InnerValue)
            {
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_VERSION:
                    Uint32.Encode(stream, encodedLedgerUpgrade.NewLedgerVersion);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_BASE_FEE:
                    Uint32.Encode(stream, encodedLedgerUpgrade.NewBaseFee);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_MAX_TX_SET_SIZE:
                    Uint32.Encode(stream, encodedLedgerUpgrade.NewMaxTxSetSize);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_BASE_RESERVE:
                    Uint32.Encode(stream, encodedLedgerUpgrade.NewBaseReserve);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_FLAGS:
                    Uint32.Encode(stream, encodedLedgerUpgrade.NewFlags);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_CONFIG:
                    LedgerUpgradeConfigSetting.Encode(stream, encodedLedgerUpgrade.LedgerConfigSetting);
                    break;
            }
        }
        public static LedgerUpgrade Decode(XdrDataInputStream stream)
        {
            LedgerUpgrade decodedLedgerUpgrade = new LedgerUpgrade();
            LedgerUpgradeType discriminant = LedgerUpgradeType.Decode(stream);
            decodedLedgerUpgrade.Discriminant = discriminant;
            switch (decodedLedgerUpgrade.Discriminant.InnerValue)
            {
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_VERSION:
                    decodedLedgerUpgrade.NewLedgerVersion = Uint32.Decode(stream);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_BASE_FEE:
                    decodedLedgerUpgrade.NewBaseFee = Uint32.Decode(stream);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_MAX_TX_SET_SIZE:
                    decodedLedgerUpgrade.NewMaxTxSetSize = Uint32.Decode(stream);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_BASE_RESERVE:
                    decodedLedgerUpgrade.NewBaseReserve = Uint32.Decode(stream);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_FLAGS:
                    decodedLedgerUpgrade.NewFlags = Uint32.Decode(stream);
                    break;
                case LedgerUpgradeType.LedgerUpgradeTypeEnum.LEDGER_UPGRADE_CONFIG:
                    decodedLedgerUpgrade.LedgerConfigSetting = LedgerUpgradeConfigSetting.Decode(stream);
                    break;
            }
            return decodedLedgerUpgrade;
        }

        public class LedgerUpgradeConfigSetting
        {
            public LedgerUpgradeConfigSetting() { }
            public ConfigSettingID Id { get; set; }
            public ConfigSetting Setting { get; set; }

            public static void Encode(XdrDataOutputStream stream, LedgerUpgradeConfigSetting encodedLedgerUpgradeConfigSetting)
            {
                ConfigSettingID.Encode(stream, encodedLedgerUpgradeConfigSetting.Id);
                ConfigSetting.Encode(stream, encodedLedgerUpgradeConfigSetting.Setting);
            }
            public static LedgerUpgradeConfigSetting Decode(XdrDataInputStream stream)
            {
                LedgerUpgradeConfigSetting decodedLedgerUpgradeConfigSetting = new LedgerUpgradeConfigSetting();
                decodedLedgerUpgradeConfigSetting.Id = ConfigSettingID.Decode(stream);
                decodedLedgerUpgradeConfigSetting.Setting = ConfigSetting.Decode(stream);
                return decodedLedgerUpgradeConfigSetting;
            }

        }
    }
}
