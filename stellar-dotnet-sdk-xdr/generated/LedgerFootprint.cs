// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct LedgerFootprint
    //  {
    //      LedgerKey readOnly<>;
    //      LedgerKey readWrite<>;
    //  };

    //  ===========================================================================
    public class LedgerFootprint
    {
        public LedgerFootprint() { }
        public LedgerKey[] ReadOnly { get; set; }
        public LedgerKey[] ReadWrite { get; set; }

        public static void Encode(XdrDataOutputStream stream, LedgerFootprint encodedLedgerFootprint)
        {
            int readOnlysize = encodedLedgerFootprint.ReadOnly.Length;
            stream.WriteInt(readOnlysize);
            for (int i = 0; i < readOnlysize; i++)
            {
                LedgerKey.Encode(stream, encodedLedgerFootprint.ReadOnly[i]);
            }
            int readWritesize = encodedLedgerFootprint.ReadWrite.Length;
            stream.WriteInt(readWritesize);
            for (int i = 0; i < readWritesize; i++)
            {
                LedgerKey.Encode(stream, encodedLedgerFootprint.ReadWrite[i]);
            }
        }
        public static LedgerFootprint Decode(XdrDataInputStream stream)
        {
            LedgerFootprint decodedLedgerFootprint = new LedgerFootprint();
            int readOnlysize = stream.ReadInt();
            decodedLedgerFootprint.ReadOnly = new LedgerKey[readOnlysize];
            for (int i = 0; i < readOnlysize; i++)
            {
                decodedLedgerFootprint.ReadOnly[i] = LedgerKey.Decode(stream);
            }
            int readWritesize = stream.ReadInt();
            decodedLedgerFootprint.ReadWrite = new LedgerKey[readWritesize];
            for (int i = 0; i < readWritesize; i++)
            {
                decodedLedgerFootprint.ReadWrite[i] = LedgerKey.Decode(stream);
            }
            return decodedLedgerFootprint;
        }
    }
}
