// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union SCObject switch (SCObjectType type)
    //  {
    //  case SCO_VEC:
    //      SCVec vec;
    //  case SCO_MAP:
    //      SCMap map;
    //  case SCO_U64:
    //      uint64 u64;
    //  case SCO_I64:
    //      int64 i64;
    //  case SCO_U128:
    //      Int128Parts u128;
    //  case SCO_I128:
    //      Int128Parts i128;
    //  case SCO_BYTES:
    //      opaque bin<SCVAL_LIMIT>;
    //  case SCO_CONTRACT_CODE:
    //      SCContractCode contractCode;
    //  case SCO_ACCOUNT_ID:
    //      AccountID accountID;
    //  };

    //  ===========================================================================
    public class SCObject
    {
        public SCObject() { }

        public SCObjectType Discriminant { get; set; } = new SCObjectType();

        public SCVec Vec { get; set; }
        public SCMap Map { get; set; }
        public Uint64 U64 { get; set; }
        public Int64 I64 { get; set; }
        public Int128Parts U128 { get; set; }
        public Int128Parts I128 { get; set; }
        public byte[] Bin { get; set; }
        public SCContractCode ContractCode { get; set; }
        public AccountID AccountID { get; set; }
        public static void Encode(XdrDataOutputStream stream, SCObject encodedSCObject)
        {
            stream.WriteInt((int)encodedSCObject.Discriminant.InnerValue);
            switch (encodedSCObject.Discriminant.InnerValue)
            {
                case SCObjectType.SCObjectTypeEnum.SCO_VEC:
                    SCVec.Encode(stream, encodedSCObject.Vec);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_MAP:
                    SCMap.Encode(stream, encodedSCObject.Map);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_U64:
                    Uint64.Encode(stream, encodedSCObject.U64);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_I64:
                    Int64.Encode(stream, encodedSCObject.I64);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_U128:
                    Int128Parts.Encode(stream, encodedSCObject.U128);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_I128:
                    Int128Parts.Encode(stream, encodedSCObject.I128);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_BYTES:
                    int binsize = encodedSCObject.Bin.Length;
                    stream.WriteInt(binsize);
                    stream.Write(encodedSCObject.Bin, 0, binsize);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_CONTRACT_CODE:
                    SCContractCode.Encode(stream, encodedSCObject.ContractCode);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_ACCOUNT_ID:
                    AccountID.Encode(stream, encodedSCObject.AccountID);
                    break;
            }
        }
        public static SCObject Decode(XdrDataInputStream stream)
        {
            SCObject decodedSCObject = new SCObject();
            SCObjectType discriminant = SCObjectType.Decode(stream);
            decodedSCObject.Discriminant = discriminant;
            switch (decodedSCObject.Discriminant.InnerValue)
            {
                case SCObjectType.SCObjectTypeEnum.SCO_VEC:
                    decodedSCObject.Vec = SCVec.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_MAP:
                    decodedSCObject.Map = SCMap.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_U64:
                    decodedSCObject.U64 = Uint64.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_I64:
                    decodedSCObject.I64 = Int64.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_U128:
                    decodedSCObject.U128 = Int128Parts.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_I128:
                    decodedSCObject.I128 = Int128Parts.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_BYTES:
                    int binsize = stream.ReadInt();
                    decodedSCObject.Bin = new byte[binsize];
                    stream.Read(decodedSCObject.Bin, 0, binsize);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_CONTRACT_CODE:
                    decodedSCObject.ContractCode = SCContractCode.Decode(stream);
                    break;
                case SCObjectType.SCObjectTypeEnum.SCO_ACCOUNT_ID:
                    decodedSCObject.AccountID = AccountID.Decode(stream);
                    break;
            }
            return decodedSCObject;
        }
    }
}
