// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)
    //  {
    //  case CLAIM_CLAIMABLE_BALANCE_SUCCESS:
    //      void;
    //  case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
    //  case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
    //  case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
    //  case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
    //  case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
    //      void;
    //  };

    //  ===========================================================================
    public class ClaimClaimableBalanceResult
    {
        public ClaimClaimableBalanceResult() { }

        public ClaimClaimableBalanceResultCode Discriminant { get; set; } = new ClaimClaimableBalanceResultCode();

        public static void Encode(XdrDataOutputStream stream, ClaimClaimableBalanceResult encodedClaimClaimableBalanceResult)
        {
            stream.WriteInt((int)encodedClaimClaimableBalanceResult.Discriminant.InnerValue);
            switch (encodedClaimClaimableBalanceResult.Discriminant.InnerValue)
            {
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_SUCCESS:
                    break;
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
                    break;
            }
        }
        public static ClaimClaimableBalanceResult Decode(XdrDataInputStream stream)
        {
            ClaimClaimableBalanceResult decodedClaimClaimableBalanceResult = new ClaimClaimableBalanceResult();
            ClaimClaimableBalanceResultCode discriminant = ClaimClaimableBalanceResultCode.Decode(stream);
            decodedClaimClaimableBalanceResult.Discriminant = discriminant;
            switch (decodedClaimClaimableBalanceResult.Discriminant.InnerValue)
            {
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_SUCCESS:
                    break;
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
                case ClaimClaimableBalanceResultCode.ClaimClaimableBalanceResultCodeEnum.CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
                    break;
            }
            return decodedClaimClaimableBalanceResult;
        }
    }
}
