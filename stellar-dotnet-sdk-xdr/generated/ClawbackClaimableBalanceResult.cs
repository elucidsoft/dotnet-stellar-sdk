// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union ClawbackClaimableBalanceResult switch (
    //      ClawbackClaimableBalanceResultCode code)
    //  {
    //  case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
    //      void;
    //  case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
    //  case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
    //  case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
    //      void;
    //  };

    //  ===========================================================================
    public class ClawbackClaimableBalanceResult
    {
        public ClawbackClaimableBalanceResult() { }

        public ClawbackClaimableBalanceResultCode Discriminant { get; set; } = new ClawbackClaimableBalanceResultCode();

        public static void Encode(XdrDataOutputStream stream, ClawbackClaimableBalanceResult encodedClawbackClaimableBalanceResult)
        {
            stream.WriteInt((int)encodedClawbackClaimableBalanceResult.Discriminant.InnerValue);
            switch (encodedClawbackClaimableBalanceResult.Discriminant.InnerValue)
            {
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
                    break;
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
                    break;
            }
        }
        public static ClawbackClaimableBalanceResult Decode(XdrDataInputStream stream)
        {
            ClawbackClaimableBalanceResult decodedClawbackClaimableBalanceResult = new ClawbackClaimableBalanceResult();
            ClawbackClaimableBalanceResultCode discriminant = ClawbackClaimableBalanceResultCode.Decode(stream);
            decodedClawbackClaimableBalanceResult.Discriminant = discriminant;
            switch (decodedClawbackClaimableBalanceResult.Discriminant.InnerValue)
            {
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
                    break;
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
                case ClawbackClaimableBalanceResultCode.ClawbackClaimableBalanceResultCodeEnum.CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
                    break;
            }
            return decodedClawbackClaimableBalanceResult;
        }
    }
}
