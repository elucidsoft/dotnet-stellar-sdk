// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  struct TransactionMetaV3
    //  {
    //      LedgerEntryChanges txChangesBefore; // tx level changes before operations
    //                                          // are applied if any
    //      OperationMeta operations<>;         // meta for each operation
    //      LedgerEntryChanges txChangesAfter;  // tx level changes after operations are
    //                                          // applied if any
    //      OperationEvents events<>;           // custom events populated by the
    //                                          // contracts themselves. One list per operation.
    //      TransactionResult txResult;
    //  
    //      Hash hashes[3];                     // stores sha256(txChangesBefore, operations, txChangesAfter),
    //                                          // sha256(events), and sha256(txResult)
    //  };

    //  ===========================================================================
    public class TransactionMetaV3
    {
        public TransactionMetaV3() { }
        public LedgerEntryChanges TxChangesBefore { get; set; }
        public OperationMeta[] Operations { get; set; }
        public LedgerEntryChanges TxChangesAfter { get; set; }
        public OperationEvents[] Events { get; set; }
        public TransactionResult TxResult { get; set; }
        public Hash[] Hashes { get; set; }

        public static void Encode(XdrDataOutputStream stream, TransactionMetaV3 encodedTransactionMetaV3)
        {
            LedgerEntryChanges.Encode(stream, encodedTransactionMetaV3.TxChangesBefore);
            int operationssize = encodedTransactionMetaV3.Operations.Length;
            stream.WriteInt(operationssize);
            for (int i = 0; i < operationssize; i++)
            {
                OperationMeta.Encode(stream, encodedTransactionMetaV3.Operations[i]);
            }
            LedgerEntryChanges.Encode(stream, encodedTransactionMetaV3.TxChangesAfter);
            int eventssize = encodedTransactionMetaV3.Events.Length;
            stream.WriteInt(eventssize);
            for (int i = 0; i < eventssize; i++)
            {
                OperationEvents.Encode(stream, encodedTransactionMetaV3.Events[i]);
            }
            TransactionResult.Encode(stream, encodedTransactionMetaV3.TxResult);
            int hashessize = encodedTransactionMetaV3.Hashes.Length;
            for (int i = 0; i < hashessize; i++)
            {
                Hash.Encode(stream, encodedTransactionMetaV3.Hashes[i]);
            }
        }
        public static TransactionMetaV3 Decode(XdrDataInputStream stream)
        {
            TransactionMetaV3 decodedTransactionMetaV3 = new TransactionMetaV3();
            decodedTransactionMetaV3.TxChangesBefore = LedgerEntryChanges.Decode(stream);
            int operationssize = stream.ReadInt();
            decodedTransactionMetaV3.Operations = new OperationMeta[operationssize];
            for (int i = 0; i < operationssize; i++)
            {
                decodedTransactionMetaV3.Operations[i] = OperationMeta.Decode(stream);
            }
            decodedTransactionMetaV3.TxChangesAfter = LedgerEntryChanges.Decode(stream);
            int eventssize = stream.ReadInt();
            decodedTransactionMetaV3.Events = new OperationEvents[eventssize];
            for (int i = 0; i < eventssize; i++)
            {
                decodedTransactionMetaV3.Events[i] = OperationEvents.Decode(stream);
            }
            decodedTransactionMetaV3.TxResult = TransactionResult.Decode(stream);
            int hashessize = 3;
            decodedTransactionMetaV3.Hashes = new Hash[hashessize];
            for (int i = 0; i < hashessize; i++)
            {
                decodedTransactionMetaV3.Hashes[i] = Hash.Decode(stream);
            }
            return decodedTransactionMetaV3;
        }
    }
}
